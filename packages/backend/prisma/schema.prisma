// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  // 生产镜像基于 Debian slim，显式生成 OpenSSL 3.0 版本的二进制，避免回退到 1.1
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// 1. 用户表
model User {
  id             Int      @id @default(autoincrement())
  username       String   @unique
  hashedPassword String
  role           String   @default("USER") // 'ADMIN' or 'USER'
  createdAt      DateTime @default(now())

  chatSessions  ChatSession[]
  connections   Connection[]
  usageQuotas   UsageQuota[]

  @@map("users")
}

// 2. 聊天会话表
model ChatSession {
  id              Int       @id @default(autoincrement())
  userId          Int?
  anonymousKey    String?
  expiresAt       DateTime?
  // 连接为中心：使用 Connection + 原始模型ID
  connectionId    Int?
  modelRawId      String?   // 供应商原始模型ID（不含前缀）
  title           String    // 可由首条消息自动生成
  createdAt       DateTime  @default(now())
  // 会话级推理默认：为空表示遵循系统设置
  reasoningEnabled Boolean?
  reasoningEffort  String?   // 'low' | 'medium' | 'high'
  ollamaThink      Boolean?

  user        User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  connection  Connection?  @relation(fields: [connectionId], references: [id])
  messages    Message[]
  usageMetrics UsageMetric[]

  @@index([expiresAt])
  @@index([anonymousKey])

  @@map("chat_sessions")
}

// 4. 消息记录表
model Message {
  id        Int      @id @default(autoincrement())
  sessionId Int
  role      String   // 'user' or 'assistant'
  content   String
  // 客户端生成的幂等ID（可选）。与 sessionId 组成唯一键，用于避免重复写入
  clientMessageId String?
  // 可选：保存推理(思维链)内容与持续时长（秒）。默认不启用保存，受系统设置控制。
  reasoning               String?
  reasoningDurationSeconds Int?
  createdAt DateTime @default(now())

  session ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  attachments MessageAttachment[]
  usageMetrics UsageMetric[]

  // 若提供了 clientMessageId，则 (sessionId, clientMessageId) 必须唯一；
  // clientMessageId 为空时不受限（SQLite 下 NULL 不参与唯一比较）。
  @@unique([sessionId, clientMessageId])
  @@map("messages")
}

model MessageAttachment {
  id           Int      @id @default(autoincrement())
  messageId    Int
  relativePath String
  createdAt    DateTime @default(now())

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
  @@map("message_attachments")
}

// 3. 用量统计表（每轮生成一条，关联到 assistant 消息）
model UsageMetric {
  id               Int       @id @default(autoincrement())
  sessionId        Int
  messageId        Int?
  model            String
  provider         String?
  promptTokens     Int       @default(0)
  completionTokens Int       @default(0)
  totalTokens      Int       @default(0)
  contextLimit     Int?
  createdAt        DateTime  @default(now())

  session ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  message Message?     @relation(fields: [messageId], references: [id], onDelete: SetNull)

  @@index([sessionId])
  @@index([messageId])
  @@map("usage_metrics")
}

// 4. 系统设置表
model SystemSetting {
  key   String @id
  value String

  @@map("system_settings")
}

model UsageQuota {
  id               Int      @id @default(autoincrement())
  identifier       String
  scope            String
  customDailyLimit Int?     @map("dailyLimit")
  usedCount        Int      @default(0)
  lastResetAt      DateTime @default(now())
  userId           Int?

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([scope, identifier])
  @@index([userId])
  @@map("usage_quota")
}

// 5. 连接（系统或用户直连）
model Connection {
  id             Int       @id @default(autoincrement())
  ownerUserId    Int?      // null=系统级；非空=用户级直连
  provider       String    // 'openai' | 'azure_openai' | 'ollama'
  baseUrl        String
  enable         Boolean   @default(true)
  authType       String    @default("bearer") // 'bearer' | 'none' | 预留：'session' | 'system_oauth' | 'microsoft_entra_id'
  apiKey         String    @default("")      // 加密存储；none 时为空
  headersJson    String    @default("")      // 额外HTTP头（JSON字符串）
  azureApiVersion String?  // 仅 provider=azure_openai 时必填
  prefixId       String?
  tagsJson       String    @default("[]")
  modelIdsJson   String    @default("[]")
  connectionType String    @default("external") // 'external' | 'local'
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  owner          User?     @relation(fields: [ownerUserId], references: [id], onDelete: Cascade)
  sessions       ChatSession[]
  catalogs       ModelCatalog[]

  @@map("connections")
}

// 6. 模型目录缓存（由连接聚合生成）
model ModelCatalog {
  id             Int       @id @default(autoincrement())
  connectionId   Int
  modelId        String    // 对外展示ID（含 prefix）
  rawId          String    // 供应商原始ID（不含前缀）
  name           String
  provider       String
  connectionType String
  tagsJson       String    @default("[]")
  manualOverride Boolean   @default(false)
  lastFetchedAt  DateTime  @default(now())
  expiresAt      DateTime

  connection     Connection @relation(fields: [connectionId], references: [id], onDelete: Cascade)

  @@unique([connectionId, modelId])
  @@index([connectionId])
  @@map("model_catalog")
}
